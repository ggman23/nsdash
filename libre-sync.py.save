#!/usr/bin/env python3
import requests
import json
from datetime import datetime, timedelta
import os

# Configuration
EMAIL = "jerome.larde@gmail.com"
PASSWORD = "Jucyla0411&&"
REGION = "EU"  # ou "US" selon votre r√©gion

# URLs LibreView selon la r√©gion
URLS = {
    "EU": "https://api-eu.libreview.io",
    "US": "https://api-us.libreview.io"
}

def connect_libreview():
    """Se connecter √† LibreView et r√©cup√©rer le token"""
    url = f"{URLS[REGION]}/llu/auth/login"
    
    headers = {
        'Content-Type': 'application/json',
    'User-Agent': 'FreeStyle LibreLink/2.8.2 (iPhone; iOS 15.0; Build:5)',
    'Accept': 'application/json',
    'Accept-Language': 'en-US,en;q=0.9',
    'Accept-Encoding': 'gzip, deflate',
    'Connection': 'keep-alive'
    }
    
    data = {
        "email": EMAIL,
        "password": PASSWORD
    }
    
    try:
        response = requests.post(url, json=data, headers=headers)
        print(f"Status de connexion: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            if result['status'] == 0:
                print("‚úÖ Connexion LibreView r√©ussie")
                return result['data']['authTicket']['token']
            else:
                print("‚ùå Erreur d'authentification")
                return None
        else:
            print(f"‚ùå Erreur HTTP: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return None

def get_glucose_data(token):
    """R√©cup√©rer les donn√©es de glucose"""
    url = f"{URLS[REGION]}/llu/connections"
    
    headers = {
        'Authorization': f'Bearer {token}',
        'User-Agent': 'LibreLinkUp/4.7.0'
    }
    
    try:
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            if data['status'] == 0 and data['data']:
                print(f"‚úÖ Donn√©es r√©cup√©r√©es pour {len(data['data'])} connexion(s)")
                return data['data']
            else:
                print("‚ùå Aucune donn√©e disponible")
                return None
        else:
            print(f"‚ùå Erreur r√©cup√©ration donn√©es: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return None

# Test de connexion
print("üîÑ Test de connexion LibreView...")
token = connect_libreview()

if token:
    print("üîÑ R√©cup√©ration des donn√©es...")
    glucose_data = get_glucose_data(token)
    
    if glucose_data:
        # Afficher un r√©sum√© des donn√©es
        for connection in glucose_data:
            print(f"\nüìä Capteur: {connection.get('firstName', 'Inconnu')}")
            
            if 'glucoseMeasurement' in connection:
                measurement = connection['glucoseMeasurement']
                print(f"Derni√®re mesure: {measurement.get('Value', 'N/A')} mg/dL")
                print(f"Timestamp: {measurement.get('Timestamp', 'N/A')}")
            
            if 'graphData' in connection:
                graph_data = connection['graphData']
                print(f"Donn√©es graphique: {len(graph_data)} points")
                
                # Afficher les 5 derni√®res valeurs
                print("5 derni√®res valeurs:")
                for i, point in enumerate(graph_data[-5:]):
                    timestamp = datetime.fromtimestamp(point['Timestamp']/1000)
                    print(f"  {timestamp}: {point['Value']} mg/dL")
    else:
        print("‚ùå Impossible de r√©cup√©rer les donn√©es")
else:
    print("‚ùå √âchec de la connexion")
